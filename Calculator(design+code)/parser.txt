//DOCS
//https://download.mikroe.com/documents/compilers/mikroc/pic/help/mikroc_pro_libraries.htm

//---------------------------KEYPAD-----------------------------------------------
int keypad_key_pressed; //variable for key pressed

char keypadLookUP[] = "741.8520963=/x-+";//given index 0 i will return '7' //and elegant implementation for keypad
// Keypad module connections
char keypadPort at PORTB;
// End Keypad module connections
//---------------------------KEYPAD-----------------------------------------------

//---------------------------LCD-----------------------------------------------
// LCD Module connections
                 sbit LCD_RS at RC4_bit;
                 sbit LCD_EN at RC5_bit;
                 sbit LCD_D7 at RD7_bit;
                 sbit LCD_D6 at RD6_bit;
                 sbit LCD_D5 at RD5_bit;
                 sbit LCD_D4 at RD4_bit;
// End LCD module connections

// LCD Pin direction
                 sbit LCD_RS_Direction at TRISC4_bit;
                 sbit LCD_EN_Direction at TRISC5_bit;

                 sbit LCD_D7_Direction at TRISD7_bit;
                 sbit LCD_D6_Direction at TRISD6_bit;
                 sbit LCD_D5_Direction at TRISD5_bit;
                 sbit LCD_D4_Direction at TRISD4_bit;
// End of LCD Pin direction

//---------------------------LCD-----------------------------------------------


//---------------------------Base Variables-----------------------------------------------
#define width 17 //LCD SCREEN WIDTH is 16

char topOfStack,inputString[25]="4x2(4+3)x4+2" , //11111111111
operand[width];//to print on 16 column screen and to append to the first operand;
int  i, j;//1 syntax error
bit dotseen,error;
//---------------------------Base Variables-----------------------------------------------

//---------------------------Truncate-----------------------------------------------
//truncateTo5_operand variables
int pointLocation,expLocation,strlength;
//end truncateTo5_operand variables
void truncateTo5_operand(){       //truncate answerString after 5
    pointLocation = expLocation = width; //out of bound so the string replacement wont do anything
    strlength = strlen(operand);

    for (i = 0; i < strlength; i++)
        if (operand[i] == '.')
            pointLocation = i;
        else if (operand[i] == 'e')
            expLocation = i;

    if (expLocation == width) //no exponential found
    {
        for (i = pointLocation + 6; i < width; i++)   //truncate after 5
        {
            operand[i] = 0;//this is '\0'
        }
    } else {  //we have exponential

        for (i = expLocation + 1; i < strlength; i++)   //move them
        {
            operand[i + 3] = operand[i];
        }
        operand[expLocation] = 'x';
        operand[expLocation + 1] = '1';
        operand[expLocation + 2] = '0';
        operand[expLocation + 3] = '^';

        operand[strlength + 3] = 0;//this is '\0' after adding 3
    }
    strlength = strlen(operand);
    for (i = strlength-1 ; i < width-1; i++)   //move them
          operand[i] = ' ';

     operand[i] = 0;

}
//---------------------------Truncate-----------------------------------------------

//---------------------------clipper-----------------------------------------------
int clipper(int val) {
    return max(0, min(val, 11));
}
//---------------------------clipper-----------------------------------------------

//---------------------------operators-----------------------------------------------
char operators[12];int operators_top;

void pushOperator(char op) { operators[clipper(operators_top++)] = op; }
char popOperator() { if (!operators_top) error = 1;return operators[clipper(--operators_top)]; }
char peekOperator() { return  operators[clipper(operators_top - 1)];}
//---------------------------operators-----------------------------------------------

//---------------------------operands-----------------------------------------------
float operands[12];int operands_top;

void pushOperand(float op) {
 operands[clipper(operands_top++)] = op;
}

float popOperand() { if (!operands_top) error = 1;return operands[clipper(--operands_top)]; }
//---------------------------operands-----------------------------------------------

 //--------------------------------------------------------------------------
//false = let parser push
//true  = let stack compute
int stackTopHasPrecedence(char parsed) {//if 'topOfStack' has higher or same precedence as 'parsed'
    topOfStack = peekOperator();
    return (topOfStack != '(') && ((parsed != 'x' && parsed != '/') || (topOfStack != '+' && topOfStack != '-'));
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
float compute(char oper, float op1, float op2) { //c computes from left to write
    switch (oper) {
        case '+':return op1 + op2;
        case '-':return op1 - op2;
        case 'x':return op1 * op2;
        case '/':return op1 / op2;
        default:return 0;
    }
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
void pushAccordingtoPrecedence(char oper) {   //push until possible
    while (operators_top > 0 && stackTopHasPrecedence(oper))
        pushOperand(compute(popOperator(), popOperand(), popOperand()));
    pushOperator(oper);
}
//--------------------------------------------------------------------------
float getInputOperand() {
    dotseen = 0; operand[0]='+';j=1;

    for (; inputString[i] == '+' || inputString[i] == '-'; ++i)
        operand[0]=(operand[0]==inputString[i]?'+':'-');

    for (; ((inputString[i] >= '0' && inputString[i] <= '9') || inputString[i] == '.'); ++i, j++) {
        operand[j] = inputString[i];
        if (inputString[i] == '.') {
            if (!dotseen)dotseen = 1;
            else error = 1;//dot syntax error
        }
    }
    operand[j] = 0;//terminator

    if (j == 1 && (operand[0] == '+' || operand[0] == '-')) error = 1;
    i--;

    return atof(operand);
}
//--------------------------------------------------------------------------

//-------------------------------algorithm-----------------------------------
void parser(){
   error = 0; operators_top=0;operands_top=0 ;

   strlength = strlen(inputString);
    for (i = 0; i < strlength; i++) {
      if (inputString[i] == '(')   pushOperator('(');

        else if (inputString[i] == ')') {
            while (operators_top > 0 && peekOperator() != '(')
                pushOperand(compute(popOperator(), popOperand(), popOperand()));

            popOperator();//pop '(' if possible

            if (i + 1 < strlength && inputString[i + 1] == '(') pushAccordingtoPrecedence('x'); //()() means ()*()
        }
        else if ((inputString[i] >= '0' && inputString[i] <= '9') || (inputString[i] == '.' || ((inputString[i] == '+' || inputString[i] == '-') && (i==0 || inputString[i-1]=='(')))) {

            pushOperand(getInputOperand());
            if (i + 1 < strlength && inputString[i + 1] == '(') pushAccordingtoPrecedence('x'); //()() means 632.2*()

        } else if ((inputString[i] == '+' || inputString[i] == '-') || (inputString[i] == 'x' || inputString[i] == '/')) {

            for (; (inputString[i] == '+' || inputString[i] == '-')&&(inputString[i+1] == '+' || inputString[i+1] == '-'); ++i)
                inputString[i+1]=(inputString[i+1]==inputString[i]?'+':'-');

            pushAccordingtoPrecedence(inputString[i]);
        }
    }
    while (operators_top > 0)
        pushOperand(compute(popOperator(), popOperand(), popOperand()));

}
//---------------------------Parser-----------------------------------------------

//---------------------------Welcome-----------------------------------------------
char UselessString[] = "               Useless Calculator ";
//---------------------------Welcome-----------------------------------------------
void main() {
    //Initialization
    //----------------------------------------
    UART1_Init(9600);
    //----------------------------------------

    Lcd_Init();                     // Initialize LCD
    Keypad_Init();                  // Initialize Keypad
    Lcd_Cmd(_LCD_CURSOR_OFF);       // Cursor Off

   Lcd_Out(1, 1, " Welcome To The ");   // Write to the first row
    delay_ms(1000);                     // Delay of 0.5s

    for (i = 0; i < 34 * 2; i++) {
        Lcd_Out(2, 1, UselessString + (i % 34)); //shift the string
        delay_ms(50);
    }
    Lcd_Cmd(_LCD_CLEAR);               // Clear Display


   do {
        i=0;
        while(keypad_key_pressed=='!'){
             keypad_key_pressed = 0; // Reset key code variable
              // Wait for key to be pressed and released
              do
                keypad_key_pressed = Keypad_Key_Click(); // Store key code in keypad_key_pressed variable

              while (!keypad_key_pressed);

              keypad_key_pressed = keypadLookUP[keypad_key_pressed - 1];  //get the character from the look up table

              Lcd_Chr(1, 1, keypad_key_pressed); // Print key ASCII value on Lcd
              inputString[i++]=keypad_key_pressed;
        }


        parser();

        if ((operators_top > 0 || operands_top > 1) || error)
        {
           Lcd_Out(2, 1, "  syntax error  ");
        }
        else {
           FloatToStr(popOperand(), operand); //compute and convert to string and put the result in answerString
           truncateTo5_operand();//answerString truncation
           Lcd_Out(2, 1, operand);
        }


        //-----------HERE
    } while (1);
}




 /*  GARBAGE
 
 
 //DOCS
//https://download.mikroe.com/documents/compilers/mikroc/pic/help/mikroc_pro_libraries.htm

//---------------------------KEYPAD-----------------------------------------------
int keypad_key_pressed; //variable for key pressed

char keypadLookUP[] = "741.8520963=/x-+()C";//given index 0 i will return '7' //and elegant implementation for keypad
// Keypad module connections
char keypadPort at PORTB;
// End Keypad module connections
//---------------------------KEYPAD-----------------------------------------------

//---------------------------LCD-----------------------------------------------
// LCD Module connections
                 sbit LCD_RS at RC4_bit;
                 sbit LCD_EN at RC5_bit;
                 sbit LCD_D7 at RD7_bit;
                 sbit LCD_D6 at RD6_bit;
                 sbit LCD_D5 at RD5_bit;
                 sbit LCD_D4 at RD4_bit;
// End LCD module connections

// LCD Pin direction
                 sbit LCD_RS_Direction at TRISC4_bit;
                 sbit LCD_EN_Direction at TRISC5_bit;

                 sbit LCD_D7_Direction at TRISD7_bit;
                 sbit LCD_D6_Direction at TRISD6_bit;
                 sbit LCD_D5_Direction at TRISD5_bit;
                 sbit LCD_D4_Direction at TRISD4_bit;
// End of LCD Pin direction

//---------------------------LCD-----------------------------------------------


//---------------------------Base Variables-----------------------------------------------
#define width 17 //LCD SCREEN WIDTH is 16

char topOfStack,inputString[25]="11111111111" , //11111111111
operand[width];//to print on 16 column screen and to append to the first operand;
int  i, j;//1 syntax error
bit dotseen,error;
//---------------------------Base Variables-----------------------------------------------

//---------------------------Truncate-----------------------------------------------
//truncateTo5_operand variables
int pointLocation,expLocation,strlength;
//end truncateTo5_operand variables
void truncateTo5_operand(){       //truncate answerString after 5
    pointLocation = expLocation = width; //out of bound so the string replacement wont do anything
    strlength = strlen(operand);

    for (i = 0; i < strlength; i++)
        if (operand[i] == '.')
            pointLocation = i;
        else if (operand[i] == 'e')
            expLocation = i;

    if (expLocation == width) //no exponential found
    {
        for (i = pointLocation + 6; i < width; i++)   //truncate after 5
        {
            operand[i] = 0;//this is '\0'
        }
    } else {  //we have exponential

        for (i = expLocation + 1; i < strlength; i++)   //move them
        {
            operand[i + 3] = operand[i];
        }
        operand[expLocation] = 'x';
        operand[expLocation + 1] = '1';
        operand[expLocation + 2] = '0';
        operand[expLocation + 3] = '^';

        operand[strlength + 3] = 0;//this is '\0' after adding 3
    }
    strlength = strlen(operand);
    for (i = strlength-1 ; i < width-1; i++)   //move them
          operand[i] = ' ';

     operand[i] = 0;

}
//---------------------------Truncate-----------------------------------------------

//---------------------------clipper-----------------------------------------------
int clipper(int val) {
    return max(0, min(val, 11));
}
//---------------------------clipper-----------------------------------------------

//---------------------------operators-----------------------------------------------
char operators[12];int operators_top;

void pushOperator(char op) {j=clipper(operators_top++); operators[j] = op; }
char popOperator() { if (!operators_top) error = 1;j=clipper(--operators_top); return operators[j]; }
char peekOperator() { return  operators[clipper(operators_top - 1)];}
//---------------------------operators-----------------------------------------------

//---------------------------operands-----------------------------------------------
float operands[12];int operands_top;

void pushOperand(float op) {

j=clipper(operands_top++);
    operands[j] = op;
}

float popOperand() { if (!operands_top) error = 1;j=clipper(--operands_top);return operands[j]; }
//---------------------------operands-----------------------------------------------

 //--------------------------------------------------------------------------
//false = let parser push
//true  = let stack compute
int stackTopHasPrecedence(char parsed) {//if 'topOfStack' has higher or same precedence as 'parsed'
    topOfStack = peekOperator();
    return (topOfStack != '(') && ((parsed != 'x' && parsed != '/') || (topOfStack != '+' && topOfStack != '-'));
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
float compute(char oper, float op1, float op2) { //c computes from left to write
    switch (oper) {
        case '+':return op1 + op2;
        case '-':return op1 - op2;
        case 'x':return op1 * op2;
        case '/':return op1 / op2;
        default:return 0;
    }
}
//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
void pushAccordingtoPrecedence(char oper) {   //push until possible
    while (operators_top > 0 && stackTopHasPrecedence(oper))
        pushOperand(compute(popOperator(), popOperand(), popOperand()));
    pushOperator(oper);
}
//--------------------------------------------------------------------------
float getInputOperand() {
    dotseen = 0; operand[0]='+';j=1;

    for (; inputString[i] == '+' || inputString[i] == '-'; ++i)
        operand[0]=(operand[0]==inputString[i]?'+':'-');

    for (; ((inputString[i] >= '0' && inputString[i] <= '9') || inputString[i] == '.'); ++i, j++) {
        operand[j] = inputString[i];
        if (inputString[i] == '.') {
            if (!dotseen)dotseen = 1;
            else error = 1;//dot syntax error
        }
    }
    operand[j] = 0;//terminator

    if (j == 1 && (operand[0] == '+' || operand[0] == '-')) error = 1;
    i--;

    return atof(operand);
}
//--------------------------------------------------------------------------

//-------------------------------algorithm-----------------------------------
void parser(){
   error = 0; operators_top=0;operands_top=0 ;

   strlength = strlen(inputString);
    for (i = 0; i < strlength; i++) {
      if (inputString[i] == '(')   pushOperator('(');

        else if (inputString[i] == ')') {
            while (operators_top > 0 && peekOperator() != '(')
                pushOperand(compute(popOperator(), popOperand(), popOperand()));

            popOperator();//pop '(' if possible

            if (i + 1 < strlength && inputString[i + 1] == '(') pushAccordingtoPrecedence('x'); //()() means ()*()
        }
        else if ((inputString[i] >= '0' && inputString[i] <= '9') || (inputString[i] == '.' || ((inputString[i] == '+' || inputString[i] == '-') && (i==0 || inputString[i-1]=='(')))) {

            pushOperand(getInputOperand());

            if (i + 1 < strlength && inputString[i + 1] == '(') pushAccordingtoPrecedence('x'); //()() means 632.2*()

        } else if ((inputString[i] == '+' || inputString[i] == '-') || (inputString[i] == 'x' || inputString[i] == '/')) {

            for (; (inputString[i] == '+' || inputString[i] == '-')&&(inputString[i+1] == '+' || inputString[i+1] == '-'); ++i)
                inputString[i+1]=(inputString[i+1]==inputString[i]?'+':'-');

            pushAccordingtoPrecedence(inputString[i]);
        }
    }
    while (operators_top > 0)
        pushOperand(compute(popOperator(), popOperand(), popOperand()));

}
//---------------------------Parser-----------------------------------------------

//---------------------------Welcome-----------------------------------------------
char UselessString[] = "               Useless Calculator ";
//---------------------------Welcome-----------------------------------------------
void main() {
    //Initialization
    //----------------------------------------
    UART1_Init(9600);
    //----------------------------------------
    TrisD=0x07;

    Lcd_Init();                     // Initialize LCD
    Keypad_Init();                  // Initialize Keypad
    Lcd_Cmd(_LCD_CURSOR_OFF);       // Cursor Off

   Lcd_Out(1, 1, " Welcome To The ");   // Write to the first row
    delay_ms(1);                     // Delay of 0.5s

    for (i = 0; i < 34 * 2; i++) {
        Lcd_Out(2, 1, UselessString + (i % 34)); //shift the string
        delay_ms(1);
    }
    Lcd_Cmd(_LCD_CLEAR);               // Clear Display


   do {
        i=0;keypad_key_pressed=0;   operators_top=0;  operands_top=0;
        while(keypad_key_pressed!='=' && keypad_key_pressed!='C' ){
              keypad_key_pressed = 0; // Reset key code variable
              // Wait for key to be pressed and released
              do
               {
                keypad_key_pressed = Keypad_Key_Click(); // Store key code in keypad_key_pressed variable

                while (PORTD.B0)
                   keypad_key_pressed=18;

                while (PORTD.B1)
                     keypad_key_pressed=17;
                while (PORTD.B2)
                     keypad_key_pressed=19;

               }
              while (!keypad_key_pressed);

              keypad_key_pressed = keypadLookUP[keypad_key_pressed - 1];  //get the character from the look up table

              if(keypad_key_pressed!='=' && keypad_key_pressed!='C')  {

                 if(i==0)  {
                     for(i=0;i<width;i++)
                         Lcd_Chr(1, i+1, ' ');
                     i=0;
                 }

                Lcd_Chr(1, i+1, keypad_key_pressed);
                inputString[i++]=keypad_key_pressed;
              }
        }
        if(keypad_key_pressed!='C')
                              {

                                   inputString[i]=0;

        UART1_Write_Text(inputString);
        UART1_Write('\r');

        parser();

        if ((operators_top > 0 || operands_top > 1) || error)
        {
           Lcd_Out(2, 1, "  syntax error  ");
        }
        else {
           FloatToStr(popOperand(), operand); //compute and convert to string and put the result in answerString
           truncateTo5_operand();//answerString truncation
           Lcd_Out(2, 1, operand);
        }
                              }
                              else {
                                Lcd_Cmd(_LCD_CLEAR);               // Clear Display
                                }


        //-----------HERE
    } while (1);
}
 
 
 
 
 
 */